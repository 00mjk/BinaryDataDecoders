name: .NET Core

on:
  push:
    branches: [ master ]
    #paths: ['src/**']    
  pull_request:
    branches: [ master ]
    #paths: ['src/**']    

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2      
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
        
    - name: Build Project
      run: |
        OUTPUT_PATH=Publish
        TEST_RESULTS_PATH=$OUTPUT_PATH/TestResults
        DOCS_PATH=$OUTPUT_PATH/docs
        RESULTS_PATH=$OUTPUT_PATH/Results     
        git fetch --prune
        dotnet tool restore
        buildVersion=`dotnet gitversion /output json /showvariable FullSemVer`
        dacVersion=`dotnet gitversion /output json /showvariable AssemblySemVer`
        echo Build Version= $buildVersion
        echo DAC Version= $dacVersion        
        echo "buildVersion=$buildVersion" >> $GITHUB_ENV   
        echo "dacVersion=$dacVersion" >> $GITHUB_ENV
        echo "BUILD_PROJECT=src/BinaryDataDecoders.slnproj" >> $GITHUB_ENV
        echo "REPORT_PROJECT=src/BinaryDataDecoders.rptproj" >> $GITHUB_ENV
        echo "BUILD_CONFIGURATION=Release" >> $GITHUB_ENV
        echo "OUTPUT_PATH=$OUTPUT_PATH" >> $GITHUB_ENV  
        echo "SANDBOX_PATH=$SANDBOX_PATH" >> $GITHUB_ENV 
        echo "TEST_RESULTS_PATH=$TEST_RESULTS_PATH" >> $GITHUB_ENV 
        echo "DOCS_PATH=$DOCS_PATH" >> $GITHUB_ENV 
        echo "RESULTS_PATH=$RESULTS_PATH" >> $GITHUB_ENV        

    - name: Clean Project
      run: dotnet clean "$BUILD_PROJECT"
    #- name: Clean Reports
    #  run: dotnet clean "$REPORT_PROJECT"
            
    - name: Restore Project
      run: dotnet restore "$BUILD_PROJECT"
    - name: Build Project
      run: dotnet build "$BUILD_PROJECT" -c $BUILD_CONFIGURATION --no-restore -p:Version=$buildVersion -p:DbVersion=$dacVersion "/bl:logfile=$OUTPUT_PATH/dotnet_build.binlog"
    - name: Test Project
      run: dotnet test "$BUILD_PROJECT" -c $BUILD_CONFIGURATION --no-build --no-restore --nologo --collect:"XPlat Code Coverage" -r "$TEST_RESULTS_PATH" --filter "TestCategory=Unit|TestCategory=Simulate" -s "$BUILD_PATH/.runsettings" /p:CollectCoverage=true /p:CopyLocalLockFileAssemblies=true
    - name: Pack Project
      run: dotnet pack "$BUILD_PROJECT" --configuration $BUILD_CONFIGURATION --no-build --no-restore -o "$OUTPUT_PATH/Nuget" -p:PackageVersion=$buildVersion
    - name: Publish Project
      run: dotnet publish "$BUILD_PROJECT" --configuration $BUILD_CONFIGURATION  --no-build --no-restore -o "$RESULTS_PATH/Binary"
    - name: Publish Project to Nuget
      run: dotnet nuget push "../Publish/Nuget/*.nupkg" -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate
      
    - name: Build Coverage Report
      run: dotnet reportgenerator "-reports:$TEST_RESULTS_PATH/**/coverage.cobertura.xml" "-targetDir:$RESULTS_PATH/Coverage" "-reportTypes:Xml" "-title:$BUILD_PROJECT - $buildVersion"
    - name: Build Reports
      run: dotnet build "$REPORT_PROJECT"

    - name: Publish Documents
      uses: actions/upload-artifact@v2
      with:
        name: BinaryDataDecoders_Documents
        path: Publish/docs/      
      
    #- name: Build Project
    #  run: |
    #    cd ./src
    #    chmod +x build.sh
    #    ./build.sh
    #    dotnet nuget push "../Publish/Nuget/*.nupkg" -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json --skip-duplicate

    #- name: Publish Documents
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: BinaryDataDecoders_Documents
    #    path: Publish/docs/
        
    #- name: Publish Nuget Packages
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: BinaryDataDecoders_Packages
    #    path: Publish/Nuget/
        
    #- name: Publish Test Results
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: BinaryDataDecoders_TestResults
    #    path: Publish/TestResults/

