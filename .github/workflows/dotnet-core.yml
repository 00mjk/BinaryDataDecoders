name: .NET Core

on:
  push:
    branches: [ master ]
    paths: ['src/**']    
  pull_request:
    branches: [ master ]
    paths: ['src/**']    

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2      
      with:
        fetch-depth: 0
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x

    - name: Build Project
      run: |
        solutionFile=./src/BinaryDataDecoders.sln
        buildConfig=Release
        testResults=./TestResults
        outputPath=./Publish

        echo === GitVersion ===
        dotnet tool install --global gitversion.tool
        export PATH="$PATH:/github/home/.dotnet/tools"
        buildVersion=`dotnet gitversion /output json /showvariable FullSemVer`
        echo GitVersion= $buildVersion
        echo "::set-env name=buildVersion::$buildVersion"
  
        echo === Restore ===
        dotnet restore "$solutionFile"

        echo === Build ===
        dotnet build "$solutionFile" --configuration $buildConfig --no-restore -p:Version=$buildVersion

        echo === Tests ===
        for testProj in ./src/*.Tests/*.csproj; do
            testName=$(basename -s .csproj $testProj)
            echo ======= TEST! $testName =======
	        dotnet test "$testProj" \
	    	    --configuration $BUILD_CONFIGURATION \
	    	    --no-build --no-restore --nologo \
	            --collect:"XPlat Code Coverage" \
	            -r "$TEST_RESULTS_PATH" \
	            --filter "TestCategory=Unit|TestCategory=Simulate" \
	            -s "$BUILD_PATH/.runsettings" \
	            --logger "trx;LogFileName=$testName.trx" 
        done 

        #echo === Package ===
        #dotnet pack --no-build --no-restore "$solutionFile" -o "$outputPath/Nuget" -p:PackageVersion=$buildVersion       

        #echo === Publish ===
        #dotnet publish --no-build --no-restore "$solutionFile" -o "$outputPath/Results/Binary"

        #echo === Build Reports ===
        #dotnet tool install --global dotnet-reportgenerator-globaltool
        #reportgenerator "-reports:$testResults/**/coverage.cobertura.xml" "-targetDir:$testResults/Coverage/Reports" "-reportTypes:HtmlInline" "-title:BinaryDataDecoders - $buildVersion"

    #- name: Publish Test Reports
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: BinaryDataDecoders_${{ env.buildVersion }}_TestResults
    #    path: ./TestResults/Coverage/Reports

    #- name: Publish Nuget Packages
    #  uses: actions/upload-artifact@v2
    #  with:
    #    name: BinaryDataDecoders_${{ env.buildVersion }}_Nuget
    #    path: ./Publish/Nuget

